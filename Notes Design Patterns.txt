https://www.youtube.com/watch?v=wNiMoNiQQJg
https://www.linkedin.com/learning/python-design-patterns-14304845



__Design Patterns
_Are stablished solutions por problems that repeat a lot of times.
_Well knowing solution to recurring problemas. 
_Widely accepted by the software devolopment community.
_Characteristics: Are Language neutral (can use in any OOP), Dynamic (alwayn new ones caming on), Intentional Incomplete (to promote customization).

__Types of Design Patterns:
_Creational (Polymorphism): To build objects sitematicaly. 
_Structural (Inheritance): To establish realtionships beteen software components. To acomplish functional (what software does) and nonfunctional (how well sotware complet his job) goals.
_Behavioral (Methods): Objets interact with each others. Deafining the protocol between this objets. Functional and nonfunctional goals.

__Pattern Context where work best:
_Participants: Classes involved to form a design pattern.
_Quality attributes: Nonfunctional requeriments (usability, modifiability, performance).
_Forces: Factors or trade-offs to consider when trying to addapt a design pattern, manifested in quality attributes.
_Consecuenses: Like worse performance, selection when an when not to use them.

__Pattern Lenguage (is like a new programing language, and consist of:)
_Name: Capture the gist of each pattern. Should be meanifull and memorable.
_Context: Provides the scenario in wich use the patterns. Insight on when and where to use.
_Problem: Describes a design challenge a pattern is addresing.
_Solution: Speccifies the pattern in term of Structure (relationships between the elements) and Behavior (interactions between the patter elements).
_Related patterns: List other patterns used together with other patterns. And describe the similar and diferences with other patterns.

__Factory: Encapsulate objets creations. Is an objet specialized in creating other objets.
_Problem: Uncertanties in types of objets. If you are going to decide what clase to use at run time.

__Abstract Factory: Builds on the factory pattern. Also create objets.
_Problem: The user expect to recieve a family of related objets at a given time but dont know wich family is untill run time.

__Singleton | Borg: Allow only one objet to be created from a class.
_Problem: Global variable in an objet-orientated way. In python community there is a popular one named Borg, that allows multiple objets instances but they all share the same state (the same atribute values in the objets, is like a globals variables).
_Context-Scenario: A need to keep a cache information to be shared by varius elements. And keep this information in a single objet like singleton or shearing constantly in Borg objets, there is no neet to retrive the information from it original sources each time.
_Solutions: All modules in python acts as singletons, shared by multiple objets. | Borg acces to information cache for networking acronyms and their spelled-out versions.

__Builder: Solution to an anipattern called Telescoping constructor. Anipattern is the oposite of the best programing practice, and we whant to avoid. Does not relay in Polymorphism unlike Factory's.
_Problem: Telescopic constructtor antipattern occurs when a software developer attemps to build a complex objet using an excesive number of constructors.
_Context-Scenario: Build a car that requieres varies car parts, to first be constructed and then assemble (Tires, engine, etc.)
_Solution: Remove or reduce unecesary complexities as much as possible, partition the process in to 4 diferent roles:
    Director: In charge of building a product.
    Abstract Builder: Provides al the necessary Interface required in building an objet.
    Concrete Builder: Inherite the Abstract Builder, implement the details of the interfaces for a specific type of product.
    Product: Represent an objet being built.

__Prototype: Clone objets acordin to a prototypical instance. Make a copy inted of building.
_Problem: When creating or instanciating many identicall objet individually that could be expensiv in computer power. Cloning is a goog alternative since it make a copy in the memory space instead of building a new one from the usual way using constructors.
_Context-Scenario: We are going to build cards, and mass production with the same color and options.
_Solution: Create a prototypical instance first, and then clone it whenever you need a replica.
_Related patterns: Abstract Factory.

__Decorator: Is a structured pattern that allow users to add new features to existing objets without changin their structures.
_Problem: Add new features to an existin objet, dinamicaly without using subclases.
_Context-Scenario: Function displayin a Hello Wolrd message. And wants to add aditional features to decorate the text, like <blink>.
Solution: Function are objets un python, we can add aditional features to this functions using @decorator.
_Related patterns: Adaptor, Composit, Strategy.

__Proxy: When creating a higly resourses intensive objet.
_Problem: Postpone the objet creation as long as possible unless obsolutely necessary, due to the higth resourses requirements of the objet to be created. There is a need of a placeholder that will create the objet.
_Context-Scenario: We create an instance of a producer class only when its available because ony a fix number of producer objets can exists at a given time. The proxi is a Artist that check if the producer is available for a guest.
_Solution: Clients interact with a proxy objet most of the time untill the resource intensive objet become available. The proxi objet is in charge of creating the resource intensive objects.
_Related: Adaptor, Decorator.

__Adapter: Convert the interface of a class in to anotherone the client is expeting.
_Problem: The interfaces are incompatible between a client and a server.
_Context-Scenario: Korean and British objets that has diferent methods names to speaking. The client want to use a uniform interface name for the two of the objets.
_Solution: Use the adaptor patter to translate methods names between client and server.
_Related: Bridge, decorator.

__Composite: Mantein a tree data structure to represent part/whole relationships.
_Problem: Built a recursive tree data structure, so that an element of the tree can have its own sub elements.  Menu>submenu>sub-submenu>...
_Context-Scenario: Creating menu and submenu items, and display this using the composite patter.
_Solution: Consist of three elements:
    Component: Is an abstract class.
    Child: Is a concrete class, inherits from the component class.
    Composite: Is a concrete class, inherits from the component class, and manteins child objets by adding and removing them to and from a tree data strucure.

__Bridge: Separate the abstraction into two different class hierarchies. Helps untangle an unecesary complicated class hierarchy, specially when implementation specific classes are mixed with implementation independent classes.
_Problem: There are two parallel or diagonal abstractions. One is implementation specific, the other is implementation independent.
_Context-Scenario:
    Implementation independent circle abstraction: Defining the propierties if a circle and scaling it.
    Implementation dependant circle abstraction: How to draw a circle.
_Solution: Avoiding abstracting both implementation specific and independent classes in a single class hierarchy. Separate the abstraction into two different class hierarchies.
_Related: Factory, Adapter.

__Observer: stablished a one to many relationship between a subjet and multiple observers.
_Problem: A subjet need to be monitored, another observer objet sould be notified when there is a change in the subjet.
_Context-Scenario: Keep track of the core temperature of reactors at a power plant, and if there is a change in the core temperature, registered observers must be notified.
_Solution: Use an abstract class called Subjet, wich is the interface that allows operations such as attaching, detaching and notifaing observers. Also is needed a Concrete subjet classes inheritance for the abstract subjet class.
_Related: Sibgleton.

__Visitor: Allows editing new features to an existing class hierarchy without changin it.
_Problem: Some times is necessary to add new operations dynamically to existing classes with minimal changes.
_Context-Scenario: We use a house class, visitors include an HVAC specialist (visitor type 1) and an Electrician (visitor type 2).
_Solution: The visitor pattern represent new operations to be performed on the varius elements on an existing class hierarchy. Visitor can also Provides operations on a composite objet.

__Iterator: Allows a client to have secuential acces to the elements of an aggregate objet without exposing its underlying structure.
_Problem: Some programers overcrowd the traversal interfaces of an aggregate objet for every possible way of iteration.
_Context-Scenario: We are building our own iterator that takes advantage of a built-in python iterator called zip(). The iterator goes through a list of German country words. It will iterate inly up to a certain pint base on client input.
_Solution: The Iterator isolate acces and transveral features from the aggregate objet. It also provides an interface for accesing the elements of an aggregate objet. An Iterator keep track of the objets being traversed. The solution is to make the aggregate objet create an iterator a client.
_Related: Composit pattern.

__Strategy: Offers a family of interchangable algorithms to a client.
_Problem: The need for dynamically changing the behavior of an objet.
_Context-Scenario:  We offer our strategy class with a default set of behaviors, when there is the need we provide another variaton of the strategy class by dinamicaly replacing its default method with a new one.
_Solution: Python allows adding method dynamically by importing the types module.

__Chain of Responsability: Opens up varius possibilities of processing for a given request. Decouples the request and its processing.
_Problem: Many different types of processing need to be done depending on the request.
_Context-Scenario: We receive an integer value and use diferent handlers to find out its range.
_Solution: We use an abstract Handler that stores a succesor that will handre a request if the current handeler doesen't handle ir. Concrete handeler check if they can handle the request. If they can they anddle it and return a true value indicating that the request was handled.
_Related: Composit.

























