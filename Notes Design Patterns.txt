https://www.youtube.com/watch?v=wNiMoNiQQJg
https://www.linkedin.com/learning/python-design-patterns-14304845



__Design Patterns
_Are stablished solutions por problems that repeat a lot of times.
_Well knowing solution to recurring problemas. 
_Widely accepted by the software devolopment community.
_Characteristics: Are Language neutral (can use in any OOP), Dynamic (alwayn new ones caming on), Intentional Incomplete (to promote customization).

__Types of Design Patterns:
_Creational (Polymorphism): To build objects sitematicaly. 
_Structural (Inheritance): To establish realtionships beteen software components. To acomplish functional (what software does) and nonfunctional (how well sotware complet his job) goals.
_Behavioral (Methods): Objets interact with each others. Deafining the protocol between this objets. Functional and nonfunctional goals.

__Pattern Context where work best:
_Participants: Classes involved to form a design pattern.
_Quality attributes: Nonfunctional requeriments (usability, modifiability, performance).
_Forces: Factors or trade-offs to consider when trying to addapt a design pattern, manifested in quality attributes.
_Consecuenses: Like worse performance, selection when an when not to use them.

__Pattern Lenguage (is like a new programing language, and consist of:)
_Name: Capture the gist of each pattern. Should be meanifull and memorable.
_Context: Provides the scenario in wich use the patterns. Insight on when and where to use.
_Problem: Describes a design challenge a pattern is addresing.
_Solution: Speccifies the pattern in term of Structure (relationships between the elements) and Behavior (interactions between the patter elements).
_Related patterns: List other patterns used together with other patterns. And describe the similar and diferences with other patterns.

__Factory: Encapsulate objets creations. Is an objet specialized in creating other objets.
_Problem: Uncertanties in types of objets. If you are going to decide what clase to use at run time.

__Abstract Factory: Builds on the factory pattern. Also create objets.
_Problem: The user expect to recieve a family of related objets at a given time but dont know wich family is untill run time.

__Singleton | Borg: Allow only one objet to be created from a class.
_Problem: Global variable in an objet-orientated way. In python community there is a popular one named Borg, that allows multiple objets instances but they all share the same state (the same atribute values in the objets, is like a globals variables).
_Context-Scenario: A need to keep a cache information to be shared by varius elements. And keep this information in a single objet like singleton or shearing constantly in Borg objets, there is no neet to retrive the information from it original sources each time.
_Solutions: All modules in python acts as singletons, shared by multiple objets. | Borg acces to information cache for networking acronyms and their spelled-out versions.

__Builder: Solution to an anipattern called Telescoping constructor. Anipattern is the oposite of the best programing practice, and we whant to avoid. Does not relay in Polymorphism unlike Factory's.
_Problem: Telescopic constructtor antipattern occurs when a software developer attemps to build a complex objet using an excesive number of constructors.
_Context-Scenario: Build a car that requieres varies car parts to first be constructed and then assemble (Tires, engine, etc.)
_Solution: Remove or reduce unecesary complexities as much as possible, partition the process in to 4 diferent roles:
    Director: In charge of building a product.
    Abstract Builder: Provides al the necessary Interface required in building an objet.
    Concrete Builder: Inherite the Abstract Builder, implement the details of the interfaces for a specific type of product.
    Product: Represent an objet being built.































